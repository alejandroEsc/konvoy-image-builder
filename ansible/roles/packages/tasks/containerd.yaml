---
- name: create containerd systemd directory
  file:
    path: "/etc/systemd/system/containerd.service.d/"
    state: directory

- name: create containerd directory
  file:
    path: "/etc/containerd/"
    state: directory

- name: copy default configuration to remote
  template:
    src: "config.toml.tmpl"
    dest: "/etc/containerd/config.toml"

- name: containerd override for flatcar
  block:
    - name: Fail if pre-installed containerd version does not match for Flatcar
      shell: containerd --version | cut -d\  -f 3
      register: command_result
      failed_when: "containerd_version not in command_result.stdout"

    - name: Create a directory if it does not exist
      file:
        path: "{{ sysusr_prefix }}/bin"
        state: directory
        mode: 0755

    - name: download containerd
      get_url:
        url: "{{ containerd_url }}"
        checksum: "sha256:{{ containerd_sha256 }}"
        dest: /tmp/containerd.tar.gz
        mode: 0600

    - name: unpack containerd
      unarchive:
        remote_src: True
        src: /tmp/containerd.tar.gz
        dest: /opt
        extra_opts:
          - --no-overwrite-dir
          - --strip-components=2
          - --wildcards
          - '*containerd-shim-runc-v*'

    - name: Create symlinks for containerd
      file:
        src: /usr/bin/{{ item }}
        dest: "{{ sysusr_prefix }}/bin/{{ item }}"
        state: link
      loop: "{{ containerd_flatcar_bins }}"

    - name: Create systemd unit file for containerd
      template:
        dest: /etc/systemd/system/containerd.service
        src: etc/systemd/system/containerd-flatcar.service
        mode: 0600

    # Remove /opt/cni directory, as we will install cni later
    - name: delete /opt/cni directory
      file:
        path: /opt/cni
        state: absent

    # Remove /etc/cni directory, as we will configure cni later
    - name: delete /etc/cni directory
      file:
        path: /etc/cni
        state: absent

    - name: Create containerd memory pressure drop in file
      template:
        dest: /etc/systemd/system/containerd.service.d/memory-pressure.conf
        src: etc/systemd/system/containerd.service.d/memory-pressure.conf
        mode: 0644

    - name: Create containerd max tasks drop in file
      template:
        dest: /etc/systemd/system/containerd.service.d/max-tasks.conf
        src: etc/systemd/system/containerd.service.d/max-tasks.conf
        mode: 0644

    - name: Create containerd http proxy conf file if needed
      template:
        dest: /etc/systemd/system/containerd.service.d/http-proxy.conf
        src: etc/systemd/system/containerd.service.d/http-proxy.conf
        mode: 0644
      when: http_proxy is defined or https_proxy is defined

    - name: delete tarball
      file:
        path: /tmp/containerd.tar.gz
        state: absent
  when: ansible_os_family == 'Flatcar'

- name: remove versionlock for containerd
  command: yum versionlock delete containerd.io
  args:
    warn: false
  ignore_errors: True
  register: command_result
  changed_when: 'command_result.stdout is regex(".*versionlock deleted: [1-9]+.*")'
  when:
    - ansible_os_family == 'RedHat'
    - versionlocklist is defined and versionlocklist.stdout is defined
    - "'containerd.io' in versionlocklist.stdout and not 'containerd.io-' + containerd_version in versionlocklist.stdout"

# only required for RHEL when not installing from a local file
- name: install container-selinux GPG key
  rpm_key:
    state: present
    key: http://mirror.centos.org/centos/RPM-GPG-KEY-CentOS-7
  register: result
  until: result is success
  retries: 3
  delay: 3
  when:
    - ansible_os_family == 'RedHat'
    - ansible_distribution == 'RedHat'
    - ansible_distribution_major_version|int == 7

- name: install container-selinux rpm package
  yum:
    name: "{{ docker_rpm_container_selinux_package_url }}"
    state: present
    update_cache: yes
  register: result
  until: result is success
  retries: 3
  delay: 3
  when:
    - ansible_os_family == 'RedHat'
    - ansible_distribution == 'RedHat'

- name: install containerd.io rpm package
  yum:
    name: "{{ 'containerd.io-' + containerd_version }}"
    state: present
    update_cache: yes
  register: result
  until: result is success
  retries: 5
  delay: 3
  when:
    - ansible_os_family == 'RedHat'

- name: add versionlock for containerd
  command: yum versionlock add containerd.io
  args:
    warn: false
  register: command_result
  changed_when: 'command_result.stdout is regex(".*versionlock added: [1-9]+.*")'
  when: ansible_os_family == 'RedHat'

- name: enable containerd
  service:
    name: containerd
    enabled: yes
  notify:
    - reload systemd
    - restart containerd
